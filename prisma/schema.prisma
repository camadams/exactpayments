// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    username  String   @default("alice")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            Int          @id @default(autoincrement())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    SellingTo     Connection[] @relation("SellingTo")
    BuyingFrom    Connection[] @relation("BuyingFrom")
}

model Connection {
    id             Int  @id @default(autoincrement())
    sellingUser    User @relation("SellingTo", fields: [sellingUserId], references: [id])
    sellingUserId  Int
    buyingUser     User @relation("BuyingFrom", fields: [buyingUserId], references: [id])
    buyingUserId   Int
    status         Int
    sentFromUserId Int

    @@index([sellingUserId])
    @@index([buyingUserId])
}

// model Connection {
//     id              Int  @id @default(autoincrement())
//     sellingToUser   User @relation("SellingTo", fields: [sellingToUserId], references: [id])
//     buyingFromUser  User @relation("BuyingFrom", fields: [userIds], references: [id])
//     sellingToUserId Int
//     userIds         Int
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id        Int      @id @default(autoincrement())
    name      String
    unitPrice Int
    userId    Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Customer {
    id            Int      @id @default(autoincrement())
    name          String
    email         String
    invoicePrefix String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Sale {
    id            Int      @id @default(autoincrement())
    quantity      Int
    productId     Int
    buyingUserId  Int
    sellingUserId Int
    saleDate      DateTime @default(now()) @db.Date
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model BillCustomerResult {
    id            Int           @id @default(autoincrement())
    firstName     String
    customerEmail String
    invoiceLines  InvoiceLine[]
    invoiceNumber String
    grandTotal    Int
    filename      String?
    billFromDate  DateTime
    billToDate    DateTime
    billDate      DateTime
}

model InvoiceLine {
    id                   Int                 @id @default(autoincrement())
    description          String
    quantity             Int
    unitPrice            Int
    total                Int
    BillCustomerResult   BillCustomerResult? @relation(fields: [billCustomerResultId], references: [id])
    billCustomerResultId Int?

    @@index([billCustomerResultId])
}

model TestDateDelete {
    id              Int      @id @default(autoincrement())
    dateTimestamptz DateTime @default(now()) @db.Timestamptz()
    dateTimestamp   DateTime @default(now()) @db.Timestamp()
    dateTimestz     DateTime @default(now()) @db.Timetz()
    dateTime        DateTime @default(now()) @db.Time()
    dateDate        DateTime @default(now()) @db.Date()
}
